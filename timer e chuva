// INCLUSÃO DE BIBLIOTECAS
#include <NTPClient.h>
#include "WiFi.h"

// DEFINIÇÕES DE PINOS
#define relay1 25
#define relay2 26
#define sensorChuva 35


// const auxiliar
const char *ssid = "93CB_Fibra";
const char *password = "3J8v7n2x"; 

WiFiServer server(80);

void relay_wifi();


// DEFINIÇÕES
#define horaLigar         14
#define minutoLigar       25
#define segundoLigar      00

#define horasAcionado     00
#define minutosAcionado   10
#define segundosAcionado  00

#define horaLigar2         13
#define minutoLigar2       40
#define segundoLigar2      00

#define horasAcionado2     00
#define minutosAcionado2   05
#define segundosAcionado2  00

#define LIGA LOW

// DECLARAÇÃO DE VARIÁVEIS
unsigned long liga;     // VARIÁVEL QUE RECEBE O VALOR PARA LIGAR
unsigned long desliga;  // VARIÁVEL QUE RECEBE O VALOR PARA DESLIGAR
unsigned long liga2;     // VARIÁVEL QUE RECEBE O VALOR PARA LIGAR
unsigned long desliga2;  // VARIÁVEL QUE RECEBE O VALOR PARA DESLIGAR

unsigned long minutosCorrido;  // VARIAVEL QUE RECEBE O VALOR DE MINUTOS CORDRIDOS DURANTE O DIA
unsigned long segundosCorrido; // VARIAVEL QUE RECEBE O VALOR DE SEGUNDOS CORDRIDOS DURANTE O DIA
unsigned long minutosCorrido2;  // VARIAVEL QUE RECEBE O VALOR DE MINUTOS CORDRIDOS DURANTE O DIA
unsigned long segundosCorrido2; // VARIAVEL QUE RECEBE O VALOR DE SEGUNDOS CORDRIDOS DURANTE O DIA

// INSTANCIANDO OBJETOS
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "a.st1.ntp.br", -4 * 3600 , 60000); // (CONEXÃO UDP, SERVIDOR NTP, AJUSTE DE FUSO (EM MINUTOS), TEMPO DE ATUALIZAÇÃO)

// DECLARAÇÃO DE FUNÇÕES
unsigned long contaMinutos  (int hora, int minuto);
unsigned long contaMinutos2  (int hora, int minuto);

void setup() {
  Serial.begin(9600);
  pinMode(sensorChuva, INPUT);
  pinMode(relay1, OUTPUT);
  digitalWrite(relay1, !LIGA); // COMEÇA COM RELE DESLIGADO;
  pinMode(relay2, OUTPUT);
  digitalWrite(relay2, !LIGA); // COMEÇA COM RELE DESLIGADO;

  delay(1000); //DELAY PARA EXIBIR SERIAL.PRINT
  Serial.print("Conectando ao WiFi ");

  Serial.println();
  Serial.print("Conectado-se a ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

    while(WiFi.status() != WL_CONNECTED)
  {
    delay(800);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi Conectado");
  Serial.println("Endereço de IP: ");
  Serial.print(WiFi.localIP());
  server.begin();

  timeClient.begin();

    liga    = contaMinutos(horaLigar , minutoLigar);
    desliga = contaMinutos(horaLigar + horasAcionado , minutoLigar + minutosAcionado);
    liga2    = contaMinutos2(horaLigar2 , minutoLigar2);
    desliga2 = contaMinutos2(horaLigar2 + horasAcionado2 , minutoLigar2 + minutosAcionado2);

}

void loop() {
  timeClient.update(); // SINCROZINA COM O HORARIO DA INTERNET
  minutosCorrido  = contaMinutos(timeClient.getHours(), timeClient.getMinutes());
  minutosCorrido2  = contaMinutos(timeClient.getHours(), timeClient.getMinutes()); // CONVERTE O HORARIO PARA O PADRÃO DE MINUTOS CORRIDOS DURANTE O DIA
 
  int leituraChuva = analogRead(35);
  Serial.print("Chuva: ");
  Serial.println (leituraChuva);
  delay(500);

  if (minutosCorrido >= liga && minutosCorrido < desliga && leituraChuva >= 1600) {
    digitalWrite(relay1, LIGA); // RELE LIGADO;

    Serial.print("LIGADO!!: ");
    Serial.println(timeClient.getFormattedTime());
    delay(1000);
  }
  else
  {
  digitalWrite(relay1, !LIGA); // RELE DESLIGADO;
  }
  if (minutosCorrido2 >= liga2 && minutosCorrido2 < desliga2 && leituraChuva >= 1600) {
    digitalWrite(relay2, LIGA); // RELE LIGADO;

    Serial.print("LIGADO!!: ");
    Serial.println(timeClient.getFormattedTime());
    delay(1000);
  }
  else
  {
  digitalWrite(relay2, !LIGA); // RELE DESLIGADO;
  }
}

// IMPLEMENTO DE FUNÇÕES

unsigned long contaMinutos(int hora, int minuto) {
  return hora * 60 + minuto;
}
unsigned long contaMinutos2(int hora, int minuto) {
  return hora * 60 + minuto;
}

unsigned long contaSegundos (int hora, int minuto, int segundo) {
  return ( (hora * 3600) + (minuto * 60) + segundo ) ;
}
unsigned long contaSegundos2 (int hora, int minuto, int segundo) {
  return ( (hora * 3600) + (minuto * 60) + segundo ) ;
}
